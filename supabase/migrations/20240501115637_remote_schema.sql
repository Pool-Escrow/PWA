
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."admin" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "address" "text"
);

ALTER TABLE "public"."admin" OWNER TO "postgres";

COMMENT ON TABLE "public"."admin" IS 'Table containing all admin addresses';

CREATE TABLE IF NOT EXISTS "public"."participantStatus" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "pool_id" numeric,
    "participant_address" character varying DEFAULT ''::character varying NOT NULL,
    "status" smallint DEFAULT '0'::smallint NOT NULL
);

ALTER TABLE "public"."participantStatus" OWNER TO "postgres";

COMMENT ON TABLE "public"."participantStatus" IS 'Tracks the status of the participant';

CREATE TABLE IF NOT EXISTS "public"."pool" (
    "pool_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "text",
    "pool_image_url" "text",
    "pool_name" "text",
    "host_address" "text",
    "co_host_addresses" "text"[],
    "event_timestamp" timestamp with time zone,
    "description" "text",
    "price" numeric,
    "soft_cap" numeric,
    "link_to_rules" "text"
);

ALTER TABLE "public"."pool" OWNER TO "postgres";

COMMENT ON TABLE "public"."pool" IS 'Contains the information regarding the pool';

ALTER TABLE "public"."pool" ALTER COLUMN "pool_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pool_pool_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."test" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "data" "text",
    "address" "text" NOT NULL
);

ALTER TABLE "public"."test" OWNER TO "postgres";

ALTER TABLE "public"."test" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "address" "text" NOT NULL,
    "auth" "jsonb"
);

ALTER TABLE "public"."users" OWNER TO "postgres";

COMMENT ON COLUMN "public"."users"."address" IS 'Wallet Address';

CREATE TABLE IF NOT EXISTS "public"."usersDisplay" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "avatar_url" "text",
    "display_name" "text",
    "bio" "text",
    "company" "text",
    "address" "text" NOT NULL
);

ALTER TABLE "public"."usersDisplay" OWNER TO "postgres";

COMMENT ON TABLE "public"."usersDisplay" IS 'Information that is publicly available to Read';

COMMENT ON COLUMN "public"."usersDisplay"."address" IS 'Wallet address of user';

ALTER TABLE ONLY "public"."admin"
    ADD CONSTRAINT "admin_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."pool"
    ADD CONSTRAINT "pool_pkey" PRIMARY KEY ("pool_id");

ALTER TABLE ONLY "public"."participantStatus"
    ADD CONSTRAINT "pool_table_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_address_key" UNIQUE ("address");

ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."usersDisplay"
    ADD CONSTRAINT "usersDisplay_address_key" UNIQUE ("address");

ALTER TABLE ONLY "public"."usersDisplay"
    ADD CONSTRAINT "usersDisplay_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_address_key1" UNIQUE ("address");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey1" PRIMARY KEY ("address");

CREATE POLICY "Allow Public Users to Read" ON "public"."usersDisplay" FOR SELECT USING (true);

CREATE POLICY "Allow Public to Insert" ON "public"."test" FOR INSERT WITH CHECK (((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = "address"));

CREATE POLICY "Allow anyone to create a pool" ON "public"."pool" FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow everyone to view the pool" ON "public"."pool" FOR SELECT USING (true);

CREATE POLICY "Allow public users to update" ON "public"."usersDisplay" FOR UPDATE USING ((((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'sub'::"text"))::"uuid" = "id"));

CREATE POLICY "Allow user of correct address to insert" ON "public"."usersDisplay" FOR INSERT WITH CHECK ((((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'sub'::"text"))::"uuid" = "id"));

CREATE POLICY "Enable read access for all users" ON "public"."participantStatus" FOR SELECT USING (true);

CREATE POLICY "Only allow creator or host to update pool" ON "public"."pool" FOR SELECT USING ((((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = "created_by") OR ((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = "host_address")));

ALTER TABLE "public"."admin" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."participantStatus" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."pool" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."test" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."usersDisplay" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."admin" TO "anon";
GRANT ALL ON TABLE "public"."admin" TO "authenticated";
GRANT ALL ON TABLE "public"."admin" TO "service_role";

GRANT ALL ON TABLE "public"."participantStatus" TO "anon";
GRANT ALL ON TABLE "public"."participantStatus" TO "authenticated";
GRANT ALL ON TABLE "public"."participantStatus" TO "service_role";

GRANT ALL ON TABLE "public"."pool" TO "anon";
GRANT ALL ON TABLE "public"."pool" TO "authenticated";
GRANT ALL ON TABLE "public"."pool" TO "service_role";

GRANT ALL ON SEQUENCE "public"."pool_pool_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pool_pool_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pool_pool_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."test" TO "anon";
GRANT ALL ON TABLE "public"."test" TO "authenticated";
GRANT ALL ON TABLE "public"."test" TO "service_role";

GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

GRANT ALL ON TABLE "public"."usersDisplay" TO "anon";
GRANT ALL ON TABLE "public"."usersDisplay" TO "authenticated";
GRANT ALL ON TABLE "public"."usersDisplay" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
